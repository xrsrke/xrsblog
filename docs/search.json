[
  {
    "objectID": "posts/03_the_brain.html",
    "href": "posts/03_the_brain.html",
    "title": "üß† The Brain",
    "section": "",
    "text": "Lastest update: April 02, 2023\n\nFace-selective neurons\n\nConcept Cells\n\nBecause that‚Äôs the way we store our memories. We tend to remember concepts and associations between them and to forget irrelevant details - so, we‚Äôll recall seeing pictures of Jennifer Aniston at the hospital ward, for instance, but won‚Äôt remember details of the specific images.\n\n\nBiological neurons are multimodal neurons, firing in response to a specific concept regardless of its modality: image, spoken name, written name. Concept cells may sometimes fire to more than one concept, but if they do, these concepts tend to be closely related (Quiroga et al., 2005).\n\nSome neurons even fire for an item related to a specific person (De Falco et al., 2016), the neuron that responded to Luke Skywalker also fired to Yoda, another Jedi from Star Wars; another neuron fired to two basketball players. They fire to the concept itself no matter how it is presented. (Quiroga, Fried and Koch, 2013).\nOr image of the person regarless with their head orinatation (Freiwald et al, 2010).\n\n\nHypothesis - Concept cells in medial temporal lope is bring stuff into awareness for forging new links and memories related to it, such as later remembering seeing it picture (Quiroga, Fried and Koch, 2013).\n\n\nContinual Learning\nFace-selective neurons maintain the same distinctive selectivity patterns for at least 10 years (McMahon et al., 2014).\nTODO: The neocortex relies on task-specific synap- tic consolidation, whereby knowledge is durably encoded by ren- dering a proportion of synapses less plastic and therefore stable over long timescales. (Fusi, Drew and Abbott, 2005)\nThe Edge of Chaos\n(Stringer et al., 2019) found that the neural representation in the mouse‚Äôs visual cortex follows critical points.\n\n\nMemory\nPatient H.M. damaged, critical for transfer short-term memories into long-term memories\n\n\nPerception\nThe perception of sweetness when eating something is not only influenced by the taste on your tongue but also by its smell (Stevenson, 1999)"
  },
  {
    "objectID": "posts/04_megatron.html",
    "href": "posts/04_megatron.html",
    "title": "XRS's Logs",
    "section": "",
    "text": "FSDL: Breaking down parallelism in Megatron-LM\n\n\n1. GPUs allocation\nMegatron-LM combines three kinds of parallelism techniques to make the most of the available computational resources.\n\nModel Parallelism: In this case, the model is divided layer by layer, spread out over multiple devices. This is also known as vertical splitting.\nTensor Parallelism: This involves splitting the weights within each layer of the model, distributing them across several devices. This is also called horizontal splitting.\nData Parallelism: Here, several copies of the same model are made. During the backward pass, all the gradients across these copies are averaged out and this average is used to update all the model replicas‚Äôs weights.\n\nSo at high-level, Megatron-LM first breaks down a model into different stages, with each stage having several layers - this is known as pipeline parallelism. Within each layer of a stage, the computation is divided into smaller sections, with each section assigned to a different GPU - this is tensor parallelism.\nIn order to carry out computations across multiple devices, each device initiates multiple processes, each of which handles a specific GPU. This way, each process can directly send computational tasks to its designated GPU. To make this work, Megatron-LM organizes GPUs into three groups:\n\nData Parallel Group: Each GPU in this group handles the same part of the model, but works on different mini-batches. During backpropagation, each GPU calculates the gradient for its part of the model. These gradients are then averaged to get the overall gradient for updating the model‚Äôs parameters.\nTensor Parallel Groups: In this group, each GPU handles different parts of the same layer (or multiple layers). Each GPU computes the output for its designated part and these partial outputs are combined to get the complete output of the layer.\nPipeline Parallel Groups: The GPUs in this group handle different stages of the forward and backward passes.\n\n\nData Parallel Groups\nMegatron-LM uses three variables to set up pipeline parallelism:\n\ntensor_model_parallel_size: The number of GPUs across which a layer will be split in tensor parallelism\npipeline_model_parallel_size: It represents the number of stages in the pipeline\ndata_parallel_size: It represents the number of model replicas in data parallelism.\n\nAnd then each process keeps a variable for each parallelism group to keep track of which group it belongs to.\n\nworld_size = 16 # the total number of GPUs\ntensor_model_parallel_size = 2\npipeline_model_parallel_size = 4\n\nIn pipeline parallelism, a model is split into pipeline_model_parallel_size stages.\nBecause Megatron-LM incorporates both tensor parallelism and pipeline parallelism, so each stage has tensor_model_parallel_size GPUs to parallelize the tensor operations in that stage. So, the total number of GPUs required to parallelize a model would be:\n\nnum_gpus_for_each_model = tensor_model_parallel_size * pipeline_model_parallel_size\n\n\nnum_gpus_for_each_model\n\n8\n\n\nAnd then to calculate the number of model replicates in data parallelism, we divide the total number of GPUs (world_size) by the number of GPUs used for each model (num_gpus_for_each_model):\n\ndata_parallel_size = world_size // num_gpus_for_each_model\n\n\ndata_parallel_size\n\n2\n\n\nAlready, so we will have two model replicas. Next, let‚Äôs setup all data parallel groups.\n\nnum_pipeline_model_parallel_groups = world_size // pipeline_model_parallel_size\n\n\nnum_pipeline_model_parallel_groups\n\n4\n\n\n\ndata_parallel_groups = []\n\n\nfor i in range(pipeline_model_parallel_size):\n    start_rank = i*num_pipeline_model_parallel_groups\n    end_rank = (i+1)*num_pipeline_model_parallel_groups\n    print(f\"stage={i}, start_rank={start_rank}, end_rank={end_rank}\") # ignore\n    \n    for j in range(tensor_model_parallel_size):\n        ranks = list(range(start_rank+j, end_rank, tensor_model_parallel_size))\n        data_parallel_groups.append(ranks)\n        print(f\"partition {j}, ranks={ranks}\")\n    \n    print(\"-------\")\n\nstage=0, start_rank=0, end_rank=4\npartition 0, ranks=[0, 2]\npartition 1, ranks=[1, 3]\n-------\nstage=1, start_rank=4, end_rank=8\npartition 0, ranks=[4, 6]\npartition 1, ranks=[5, 7]\n-------\nstage=2, start_rank=8, end_rank=12\npartition 0, ranks=[8, 10]\npartition 1, ranks=[9, 11]\n-------\nstage=3, start_rank=12, end_rank=16\npartition 0, ranks=[12, 14]\npartition 1, ranks=[13, 15]\n-------\n\n\n\ndata_parallel_groups\n\n[[0, 2], [1, 3], [4, 6], [5, 7], [8, 10], [9, 11], [12, 14], [13, 15]]\n\n\n\n\n\nData Parallel Groups\n\n\nAlready, stay calm. Let‚Äôs break it down\n\nfor i in range(pipeline_model_parallel_size): We iterate through all the stages in the pipeline\nfor j in range(tensor_model_parallel_size): Within each stage, a layer is divided into tensor_model_parallel_size partitions. There will be tensor_model_parallel_size data parallel groups in each stage.\nrange(start_rank + j, end_rank, tensor_model_parallel_size): We iterate through the next group each time, so the starting GPU will be start_rank + j. Since our model layer is divided into tensor_model_parallel_size parts, each part is assigned to a different GPU. This means the same part of the model in different GPUs is tensor_model_parallel_size ranks apart. So, by using a step size of tensor_model_parallel_size, we are able to get the same part of the model from different GPUs.\n\nSince discussing the setup of parallel groups for tensor parallel and pipeline parallel would make it too long, let‚Äôs assume that we have already set up all three groups. Now, the question is: How do we allocate GPUs to CPUs?\n\n\nAllocate GPUs to CPUs\nSo, here‚Äôs the deal: a CPU starts up multiple processes. Each of these processes gets tied to a GPU because GPUs are way faster at deep learning tasks than CPUs. So, each process sends its task over to its assigned GPU. But how does a process get tied to a specific GPU?\n\nworld_size\n\n16\n\n\n\nnum_gpus = 4\n\n\nprocess_to_gpu = []\n\n\nfor rank in range(world_size):\n    process_to_gpu.append(rank % num_gpus)\n\n\nprocess_to_gpu\n\n[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]\n\n\nWell, it‚Äôs done in a round-robin way across all available GPUs. This approach makes it really flexible if you change the number of processes or GPUs. And it also works when there are more processes than GPUs.\n\n_ = [print(f\"rank: {rank} -> gpu: {gpu}\") for rank, gpu in enumerate(process_to_gpu)]\n\nrank: 0 -> gpu: 0\nrank: 1 -> gpu: 1\nrank: 2 -> gpu: 2\nrank: 3 -> gpu: 3\nrank: 4 -> gpu: 0\nrank: 5 -> gpu: 1\nrank: 6 -> gpu: 2\nrank: 7 -> gpu: 3\nrank: 8 -> gpu: 0\nrank: 9 -> gpu: 1\nrank: 10 -> gpu: 2\nrank: 11 -> gpu: 3\nrank: 12 -> gpu: 0\nrank: 13 -> gpu: 1\nrank: 14 -> gpu: 2\nrank: 15 -> gpu: 3\n\n\n\n\nMPU\n\n\n\nimage.png\n\n\nThe MPU (stands for ‚ÄúModel Parallel Unit‚Äù) class is the one that handles all this GPU allocation. It puts each GPU into the right parallel group, either tensor parallel, model parallel, or pipeline parallel.\nIn a distributed training setting, all nodes run the same code. So, this GPU allocation script gets executed on all nodes in the cluster. PyTorch sets up the communication channels based on the environment variable RANK for each node. After setting up the parallel groups, the MPU class keeps track of which parallel group a CPU belongs to by storing it in a local variable.\nNow, the pipeline parallelism needs to be set up. But since data_parallel_size depends on the number of GPUs per model, so we only need two variables to initialize the pipeline: tensor_model_parallel_size and pipeline_model_parallel_size. Now let‚Äôs put them all together\n\nimport os\nimport torch\n\n\nclass MPU:\n    def __init__(\n        self,\n        tensor_model_parallel_size,\n        pipeline_model_parallel_size,\n        master_addr,\n        master_port,\n        backend\n    ):\n        if not torch.distributed.is_initialized():\n            os.environ[\"MATER_ADDR\"] = str(master_addr)\n            os.environ[\"MASTER_PORT\"] = str(master_port)\n            \n            self.set_device(rank)            \n            torch.distributed.init_process_group(\n                rank=rank,\n                world_size=world_size,\n                backend=backend,\n            )\n        \n        current_rank = torch.distributed.get_rank()\n        world_size = torch.distributed.get_world_size()\n        \n        self.num_pipeline_model_parallel_groups = world_size // pipeline_model_parallel_size\n        self._data_paralell_group = None\n        \n        self.init_data_parallel_group(current_rank, tensor_model_parallel_size, pipeline_model_parallel_size)\n        # init tensor parallel and pipeline paralell groups \n    \n    def set_device(self, rank):\n        num_gpus = torch.cuda.device_count()\n        if device_count > 0:\n            device = rank % num_gpus\n            torch.cuda.set_device(device)\n        \n    def init_data_parallel_group(\n        self,\n        rank,\n        tensor_model_parallel_size,\n        pipeline_model_parallel_size\n    ):\n        for i in range(pipeline_model_parallel_size):\n            start_rank = i*self.num_pipeline_model_parallel_groups\n            end_rank = (i+1)*self.num_pipeline_model_parallel_groups\n\n            for j in range(tensor_model_parallel_size):\n                ranks = list(range(start_rank+j, end_rank, tensor_model_parallel_size))\n                data_parallel_groups.append(ranks)\n                \n                if rank in ranks:\n                    group = torch.distributed.new_group(ranks=ranks)\n                    self._data_paralell_group = group\n\n\n\n\n2. Distributed Communication\nWhen we train a model in a distributed manner, there are four atomic operations in distributed communication that we need to perform\n\nBroadcast: We start with a tensor in one process and send it to all the other processes within the group. This is like sharing a piece of information with everyone in the group.\nScatter: We take a tensor from one process and distribute its elements or chunks to all the other processes in the group. This is like dividing up a task among all the members in a team.\nReduce: We gather data from all the processes in the group and assemble it into a single tensor at the destination process. This is like collecting everyone‚Äôs input and putting it together in one place.\nGather: We take data from all processes in the group, apply a specific operation to it (like summing, multiplying, finding the minimum or maximum), and then store the result in the destination process. This is like combining everyone‚Äôs efforts and producing a single output\n\nHowever, we can‚Äôt just directly use these operations from PyTorch like torch.distributed.broadcast. This is because in training, let‚Äôs say we are broadcasting a tensor x from device 0 to all devices 1, 2, and 3 during the forward pass. We must also support the reverse order during the backward pass. This means we have to write a broadcast operation that can handle both forward and backward passes.\n\n\n3. Let‚Äôs implement ColumnLinearParallel from scratch\nLet‚Äôs start with an simple example how does ColumnParallelLinear works. Then, we jump to implement a version that support the backward pass\n\ninputs.shape, weights.shape\n\n(torch.Size([2, 4]), torch.Size([4, 2]))\n\n\n\noutputs = torch.matmul(inputs, weights)\n\n\noutputs.shape\n\ntorch.Size([2, 2])\n\n\n\n\n\nColumn Parallel Linear\n\n\n\ndef compute_column_parallel_linear(inputs, weights, n_partritions):\n    last_dim_size = weights.shape[-1]\n    partrition_size = last_dim_size // n_partritions\n    w1, w2 = weights[:, :partrition_size], weights[:, partrition_size:]\n    out1 = torch.matmul(inputs, w1)\n    out2 = torch.matmul(inputs, w2)\n    return torch.cat([out1, out2], dim=-1)\n\n\noutputs_parallel = compute_column_parallel_linear(inputs, weights, n_partritions=2)\n\n\noutputs_parallel.shape\n\ntorch.Size([2, 2])\n\n\n\noutputs == outputs_parallel\n\ntensor([[True, True],\n        [True, True]])\n\n\nIn summary, the ColumnParallelLinear class divides the work of a linear layer across multiple processes. It does this by dividing the output dimension of the layer among the processes. Each process then computes its portion of the output and the gradients during the forward and backward passes, respectively. After the forward pass, the outputs from all the processes are gathered together to create the final output tensor. During the backward pass, the gradients are distributed across all the processes, and each process uses its portion of the gradient to update its parameters.\n\nfrom torch import nn\n\n\nclass f(torch.autograd.Function):\n    @staticmethod\n    def forward(ctx, input):\n        return input\n\n    @staticmethod\n    def backward(ctx, grad_output):\n        torch.distributed.all_reduce(grad_output)\n        return grad_output\n\n\nclass g(torch.autograd.Function):\n    @staticmethod\n    def forward(ctx, input):\n        world_size = torch.distributed.get_world_size()\n        input_list = [torch.empty_like(input) for _ in range(world_size)]\n        dist.all_gather(input_list, input)\n        inputs = torch.cat(input_list, dim=-1)\n        return inputs\n\n    @staticmethod\n    def backward(ctx, grad_output):\n        rank = torch.distributed.get_rank()\n        world_size = torch.distributed.get_world_size()\n        dim_size = grad_output.shape[-1]\n        chunk_size = dim_size // world_size\n        grad_chunks = torch.split(grad_output, chunk_size, dim=-1)\n        return grad_chunks[rank]\n\n\nclass ColumnParallelLinear(nn.Module):\n    def __init__(self, input_size, output_size):\n        super().__init__()\n        world_size = torch.distributed.get_world_size()\n        \n        self.input_size = input_size\n        self.output_size = output_size\n        self.output_size_per_partition = output_size // world_size\n\n        self.weight = Parameter(torch.empty(\n            self.output_size_per_partition,\n            self.input_size,\n            requires_grad=True\n        ))\n        self.bias = Parameter(torch.empty(\n            self.output_size_per_partition,\n            requires_grad=True\n        ))\n\n    def forward(self, input):\n        input_parallel = f.apply(input)\n        output_parallel = F.linear(input_parallel, self.weight, self.bias)\n        outputs = g.apply(output_parallel)\n        return outputs\n\n\nself.output_size_per_partition = output_size // num_partitions: This line calculates the output size for each partition by dividing the total output size by the number of partitions. This is done because the output dimension of the linear layer is divided among multiple processes, and each process will handle its corresponding portion of the output dimension.\nself.weight = nn.Parameter(torch.empty(self.output_size_per_partition, self.input_size)): This line initializes the weight parameter for the current process. Since each process is responsible for its own portion of the output dimension.\noutput_partition = F.linear(input, self.weight, self.bias): The output partition corresponding to the current process.\noutputs = [torch.empty_like(output_partition) for _ in range(world_size)]: This line creates an outputs list with empty tensors that have the same shape as output_partition. These tensors will be used to store the output of each process.\ndist.all_gather(outputs, output_partition): The dist.all_gather function is called to gather the output_partition from all processes in the distributed group and store them in the outputs list."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "XRS's Logs",
    "section": "",
    "text": "Just a place where I share my learning notes and progress! Most of my posts are ongoing, so they will be gradually updated.\nI stream daily on twitch: twitch.tv/xrsrke\nSay hello? Feel free to get in touch at neuralink#7014 in discord, twitter/@xariusrke or hello@xrs.wtf üòä\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\nFSDL: Breaking down parallelism in Megatron-LM\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nüß† The Brain\n\n\n\n\n\nThere are problems in deep learning that we don‚Äôt know how to solve (catastrophic forgeting, adversarial attack‚Ä¶). It makes sense to pay some attention to how the brain solves them\n\n\n\n\n\n\nApr 1, 2023\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "project_foundation.html",
    "href": "project_foundation.html",
    "title": "Project Foundation",
    "section": "",
    "text": "Currently I‚Äôm full-time working on Project Foundation.\nThe goal of project foundation is give me a foundation to give me a framework of thinking‚Ä¶\n\nPhysics\nDeep Learning\nMaterial Science\nNanoscience\nNeuroscience"
  }
]